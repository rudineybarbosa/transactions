- INSTALL DOCKER
	https://docs.docker.com/engine/install/ubuntu/

- INSTALL DOCKER COMPOSE
	https://docs.docker.com/compose/install/

- ATUALIZAR USUARIOS DO GRUPO DOCKER e evitar usar sudo
	newgrp docker

- COMUNICAÇÃO ENTRE CONTAINERS
	https://stackoverflow.com/questions/56667414/access-mysql-in-one-container-from-another-container


###################DOCKER TO APPLICATION##########################
- CRIAR DOCKERFILE da aplicação

- CRIAR IMAGEM, rodando o comando abaixo na mesma pasta do arquivo 'Dockerfile'
	docker build -t rudiney/pismo .
	 --não esquecer do ponto (indica o diretorio atual, onde está um arquivo chamado 'Dockerfile')

	OU

	docker build -t rudiney/pismo ../ -f app.Dockerfile
	 --com arquivo nomeado app.Dockerfile

- EXECUTAR A IMAGEM para criar e disponibilizar o container
	docker run rudiney/pismo --link mysql57c

	docker run -t --link mysql57c -p 8080:8080 rudiney/pismo

	docker run --network=pismo --name javacontainer rudiney/pismo

###################DOCKER TO DATA BASE##########################
- CRIAR DOCKERFILE do banco de dados
	Baixar uma imagem do mysql
		FROM mysql:5.7

	CRIAR IMAGEM
		docker build -t rudiney/pismo-db .


	CRIAR IMAGEM do banco de dados
		Verificar se a porta esta em uso
			sudo lsof -i -P -n | grep LISTEN

		Matar processo utilizando uma porta
			sudo kill `sudo lsof -t -i:3306`
		Stop container
			docker stop b25b69c344de
	
	EXECUTAR A IMAGEM
		sudo docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=userTransactions -e MYSQL_USER=root -e MYSQL_PASSWORD= rudiney/pismo-db --name mysql57c --network=pismo

		sudo docker run -d --network=pismo --name mysql57c -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=userTransactions -e MYSQL_USER=root -e MYSQL_PASSWORD= rudiney/pismo-db 

	TESTAR imagem do banco de dados
		docker exec -it container_id bash
		root@container_id:/# mysql -uroot -p
		Enter password: 'digitar o valor de MYSQL_ROOT_PASSWORD'

	PEGAR O IP DE UM CONTAINER
		docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container_name_or_id
		docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' b4615b966e00